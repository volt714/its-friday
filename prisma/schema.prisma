// Prisma schema for portal_db

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  WORKING_ON_IT
  DONE
  NOT_STARTED
  STUCK
}

enum Role {
  USER
  ADMIN
  DEVELOPER
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String
  order     Int      @default(0)
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id        Int      @id @default(autoincrement())
  title     String
  owner     String? // legacy owner text
  ownerId   Int?    // FK to User
  ownerUser User?   @relation("UserTasks", fields: [ownerId], references: [id])
  status    Status   @default(NOT_STARTED)
  startDate DateTime? // Date when task was assigned to someone
  dueDate   DateTime?
  dropdown  String?
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  assignees TaskAssignee[]
  messages  TaskMessage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  email         String?   @unique
  passwordHash  String
  role          Role      @default(USER)
  Task          Task[]    @relation("UserTasks")
  TaskAssignee  TaskAssignee[]
  TaskMessage   TaskMessage[]
}

model TaskAssignee {
  taskId   Int
  userId   Int
  task     Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([taskId, userId])
}

model TaskMessage {
  id        Int      @id @default(autoincrement())
  taskId    Int
  userId    Int
  body      String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}


